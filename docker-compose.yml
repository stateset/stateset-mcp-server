version: '3.8'

services:
  stateset-mcp-server:
    build: .
    container_name: stateset-mcp-server
    ports:
      - "3000:3000"    # MCP server port
      - "9464:9464"    # Prometheus metrics port
    environment:
      - NODE_ENV=production
      - STATESET_API_KEY=${STATESET_API_KEY}
      - STATESET_API_URL=${STATESET_API_URL:-https://api.stateset.com}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - ENABLE_TELEMETRY=${ENABLE_TELEMETRY:-false}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - CACHE_STRATEGY=${CACHE_STRATEGY:-lru}
      - RATE_LIMIT_REQUESTS_PER_HOUR=${RATE_LIMIT_REQUESTS_PER_HOUR:-1000}
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      - FEATURE_HEALTH_CHECK=true
      - FEATURE_METRICS=true
      - FEATURE_CACHING=true
      - FEATURE_CIRCUIT_BREAKER=true
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - stateset-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: stateset-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - stateset-network
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: stateset-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - stateset-network
    profiles:
      - monitoring

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: stateset-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stateset-network
    profiles:
      - cache

networks:
  stateset-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  redis_data: